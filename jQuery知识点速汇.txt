1.cdn:
Google:
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.0/jquery.min.js"></script>
	如果您观察上什么的 Google URL - 在 URL 中规定了 jQuery 版本 (1.8.0)。如果您希望使用最新版本的 jQuery，也可以从版本字符串的末尾（比如本例 1.8）删除一个数字，谷歌会返回 1.8 系列中最新的可用版本（1.8.0、1.8.1 等等），或者也可以只剩第一个数字，那么谷歌会返回 1 系列中最新的可用版本（从 1.1.0 到 1.9.9）。
Microsoft:
	<script type="text/javascript" src="http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js"></script>
	许多用户在访问其他站点时，已经从谷歌或微软加载过 jQuery。所有结果是，当他们访问您的站点时，会从缓存中加载 jQuery，这样可以减少加载时间。同时，大多数 CDN 都可以确保当用户向其请求文件时，会从离用户最近的服务器上返回响应，这样也可以提高加载速度。

2.事件
鼠标事件	键盘事件	表单事件	文档/窗口事件
click	    keypress	submit		load
dblclick	keydown		change		resize
mouseenter	keyup		focus		scroll
mouseleave	blur		unload

3.JQuery效果
   隐藏和显示	
	   $(selector).hide(speed,callback);	显示
	   $(selector).show(speed,callback);	隐藏
	   $(selector).toggle(speed,callback); 	切换show/hide
	   speed:slow/fast/ms;
	   callback:function(){}-回调函数;

   淡入淡出隐藏元素 Fading方法
	   $(selector).fadeIn(speed,callback);			淡入
	   $(selector).fadeOut(speed,callback);			淡出
	   $(selector).fadeToggle(speed,callback);		切换fadeIn/fadeOut
	   $(selector).fadeTo(speed,opacity,callback);	jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。
	   speed:slow/fast/ms;
	   callback:function(){}-回调函数;
	   opacity:0-1;
	   注意：用stop()取消动画过程中的问题

   滑动
	   $(selector).slideDown(speed,callback);		向下滑动
	   $(selector).slideUp(speed,callback);			向上滑动	
	   $(selector).slideToggle(speed,callback);		切换shildeDown/shildeUp
	   speed:slow/fast/ms;
	   callback:function(){}-回调函数;
  	 注意：用stop()取消动画过程中的问题

   自定义动画 animate----首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute
	   $(selector).animate({params},speed,callback);
	   params 参数定义形成动画的 CSS 属性。
	   speed:slow/fast/ms;
	   callback:function(){}-回调函数;
	   注意：当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left。/////同时，色彩动画并不包含在核心 jQuery 库中。/////

	   预定义的值---把属性的动画值设置为 "show"、"hide" 或 "toggle"：
	   		$("button").click(function(){
	   		  $("div").animate({
	   		    height:'toggle/hide/show'
	   		  });
	   		}); 

	   队列功能---在彼此之后编写多个 animate() 调用，jQuery 会创建包含这些方法调用的"内部"队列。然后逐一运行这些 animate 调用。
	   		$("button").click(function(){
	   		  var div=$("div");
	   		  div.animate({height:'300px',opacity:'0.4'},"slow");
	   		  div.animate({width:'300px',opacity:'0.8'},"slow");
	   		  div.animate({height:'100px',opacity:'0.4'},"slow");
	   		  div.animate({width:'100px',opacity:'0.8'},"slow");
	   		});
	   		→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→
	   		$(document).ready(function(){
	   		  $("button").click(function(){
	   		    var div=$("div");
	   		    div.animate({height:'300px',opacity:'0.4'},"slow",function(){
	   				div.animate({width:'300px',opacity:'0.8'},"slow",function(){
	   					div.animate({height:'100px',opacity:'0.4'},"slow",function(){
	   						div.animate({width:'100px',opacity:'0.8'},"slow");
	   					});
	   				});
	   			});   
	   		  });
	   		});
	stop()---方法用于在动画或效果完成前对它们进行停止----http://www.runoob.com/try/try.php?filename=tryjquery_stop_params
	stop(true/false,true/false);-----stop(clearQueue,gotoEnd);
	delay();   延迟动画
	Callback---方法-Callback 函数在当前动画 100% 完成之后执行
	Chaining方法链接---链接（chaining）的技术，允许我们在相同的元素上运行多条 jQuery 命令，一条接着另一条。
		eg:$("#p1").css("color","red").slideUp(2000).slideDown(2000);
4.jQuery HTML
	获得内容、设置内容和属性 - text()、html() 以及 val()
		三个简单实用的用于 DOM 操作的 jQuery 方法：
		text() - 设置或返回所选元素的文本内容
		html() - 设置或返回所选元素的内容（包括 HTML 标记）
		val()  - 设置或返回表单字段的值
	text()、html() 以及 val() 的回调函数	
		回调函数由两个参数：被选元素列表中当前元素的下标(i)，以及原始（旧的）值(origText)。然后以函数新值返回您希望使用的字符串(str)。

	获取属性、设置属性 - attr()
		一个：$("#runoob").attr("href","http://www.runoob.com/jquery");
			多个：$("#runoob").attr({
			        "href" : "http://www.runoob.com/jquery",
			        "title" : "jQuery 教程"
			    });
	attr() 的回调函数
		回调函数由两个参数：被选元素列表中当前元素的下标(i)，以及原始（旧的）值(origValue)。然后以函数新值返回您希望使用的字符串(str)。

	添加元素
		append()  - 在被选元素的结尾插入内容
		prepend() - 在被选元素的开头插入内容
			append() 和 prepend() 方法能够通过参数接收无限数量的新元素,这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 append() 方法把这些新元素追加到文本中（对 prepend() 同样有效）
		after()   - 在被选元素之后插入内容
		before()  - 在被选元素之前插入内容
			after() 和 before() 方法能够通过参数接收无限数量的新元素,这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 after() 方法把这些新元素追加到文本中（对 before() 同样有效）

	删除元素
		如需删除元素和内容，一般可使用以下两个 jQuery 方法：
		remove() - 删除被选元素（及其子元素）
			remove() 方法也可接受一个参数，允许您对被删元素进行过滤。
			eg:$("p").remove(".italic");----删除 class="italic" 的所有 <p> 元素
		empty() - 从被选元素中删除子元素

	获取并设置 CSS 类
		jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：
			addClass() - 向被选元素添加一个或多个类
			removeClass() - 从被选元素删除一个或多个类
			toggleClass() - 对被选元素进行添加/删除类的切换操作
			css() - 设置或返回样式属性
				css({"propertyname":"value","propertyname":"value",...});

	尺寸方法
		jQuery 提供多个处理尺寸的重要方法：
		width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。
		height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。
		innerWidth() 方法返回元素的宽度（包括内边距）。
		innerHeight() 方法返回元素的高度（包括内边距）。
		outerWidth() 方法返回元素的宽度（包括内边距和边框）。
		outerHeight() 方法返回元素的高度（包括内边距和边框）。
5.jQuery 遍历
	向上遍历 DOM 树
		parent()---parent() 方法返回被选元素的直接父元素
		parents()---parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。
			使用可选参数来过滤对祖先元素的搜索，返回所有 <span> 元素的所有祖先，并且它是 <ul> 元素
			eg：$("span").parents("ul");
		parentsUntil()---parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。
			eg：$("span").parentsUntil("div");

	向下遍历 DOM 树
		children()
		find()

	 DOM 树中水平遍历
	 	siblings()---siblings() 方法返回被选元素的所有同胞元素。
	 	next()---next() 方法返回被选元素的下一个同胞元素
	 	nextAll()---nextAll() 方法返回被选元素的所有跟随的同胞元素
	 	nextUntil()---nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素
	 	prev()
	 	prevAll()
	 	prevUntil()
	 	prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞元素向后遍历，而不是向前）

	过滤
		first()---first() 方法返回被选元素的首个元素。
		last()---last() 方法返回被选元素的最后一个元素。
		eq()---eq() 方法返回被选元素中带有指定索引号的元素。
		filter()---filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。
		not()---not() 方法返回不匹配标准的所有元素。
6.jQuery - AJAX
	AJAX load() 方法---load() 方法从服务器加载数据，并把返回的数据放入被选元素中
		eg:$(selector).load(URL,data,callback);
		必需的 URL 参数规定您希望加载的 URL。
			 jQuery 选择器添加到 URL 参数
			 eg:$("#div1").load("demo_test.txt #p1");
		可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。
		可选的 callback 参数是 load() 方法完成后所执行的函数名称。
				responseTxt - 包含调用成功时的结果内容
				statusTXT - 包含调用的状态
				xhr - 包含 XMLHttpRequest 对象
			eg:
			$("button").click(function(){
			  $("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
			    if(statusTxt=="success")
			      alert("外部内容加载成功!");
			    if(statusTxt=="error")
			      alert("Error: "+xhr.status+": "+xhr.statusText);
			  });
			});

	GET vs. POST
		GET - 从指定的资源请求数据。GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。
		POST - 向指定的资源提交要处理的数据。POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。
		
		$.get() 方法---通过 HTTP GET 请求从服务器上请求数据。
			$.get(URL,callback);
			必需的 URL 参数规定您希望请求的 URL。
			可选的 callback 参数是请求成功后所执行的函数名(data,status)数据和状态。

		$.post() 方法---通过 HTTP POST 请求从服务器上请求数据。
			$.post(URL,data,callback);
			必需的 URL 参数规定您希望请求的 URL。
			可选的 data 参数规定连同请求发送的数据。
			可选的 callback 参数是请求成功后所执行的函数名。

	noConflict() 方法---会释放对 $ 标识符的控制，这样其他脚本就可以使用它了
		全名替代简写的方式来使用 jQuery
			eg: $.noConflict();
				jQuery(document).ready(function(){
				  jQuery("button").click(function(){
				    jQuery("p").text("jQuery 仍然在工作!");
				  });
				});

		创建自己的简写
			eg: var jq = $.noConflict();
				jq(document).ready(function(){
				  jq("button").click(function(){
				    jq("p").text("jQuery 仍然在工作!");
				  });
				});

		Query 代码块使用 $ 简写，并且您不愿意改变这个快捷方式，那么您可以把 $ 符号作为变量传递给 ready 方法。这样就可以在函数内使用 $ 符号了 - 而在函数外，依旧不得不使用 "jQuery"
			eg: $.noConflict();
				jQuery(document).ready(function($){
				  $("button").click(function(){
				    $("p").text("jQuery 仍然在工作!");
				  });
				});
7.jQuery - JSONP
	eg:
	<!DOCTYPE html>
	<html>
	<head>
	    <meta charset="utf-8">
	    <title>JSONP 实例</title>
	    <script src="http://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js"></script>    
	</head>
	<body>
	<div id="divCustomers"></div>
	<script>
	$.getJSON("http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=?", function(data) {
	    
	    var html = '<ul>';
	    for(var i = 0; i < data.length; i++)
	    {
	        html += '<li>' + data[i] + '</li>';
	    }
	    html += '</ul>';
	    
	    $('#divCustomers').html(html); 
	});
	</script>
	</body>
	</html>







